# -*- coding: utf-8 -*-
"""Assignment_6_tuple,dictionary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iih3k8L8RhixJ3E-I8dSYAyd9SrageJv
"""

#assignment6
''' tuple'''

mixed_type = ('C','S','E', 1, 1, 0)
for char in mixed_type:
  print(char,":",type(char))

#same value have the same id in tuple
nth_tuple=21,21,34,76
if id(nth_tuple[0]) == id(nth_tuple[1]):
  print("True")
  print(id(nth_tuple[0]))
  print(id(nth_tuple[1]))

nth_tuple = (21,21,34,47)
if id(nth_tuple[0]) == id(nth_tuple[1]):
  print("True")
print(id(nth_tuple[0])) #id() before tuple indexing means location address
print(id(nth_tuple[1])) #'''you cant write it nth_tuple[0]=21, it will show error, tuple is immutable'''

#Execution time for tuple:
import timeit
print(timeit.timeit('x=(1,2,3,4,5,6,7,8,9)',number=100000))

import timeit
print(timeit.timeit('x=1,2,3,4,5,6,7,8,9)',number=100000))

'''#Trying to change ‘E’ to ‘O’ mixed_type[2] = 'O'''
#its not possible in tuple.
#but this is possible
#While specifying a range in a tuple, the return value will give a new tuple with the specified items:

example_tuple = ("Banana", "Mango","Apple", "Orange","Grape","Jackfruit")
print(example_tuple[2:5])

#tuple unpacking in 3 ways
'i'
a,b=2,5
tem1=a
tem2=b
b=tem1
a=tem2
print(a,b)

'ii'
a,b=2,5
tem=a
a=b
b=tem
print(a,b)

'iii'
a,b=2,5
a,b=b,a
print(a,b)

#
list1=[1,2,3,4,5]
list1=tuple(list1)
print(list1)

#tuple to list and list to tuple
given_tuple=(1,2,3,4,5)
to_list=list(given_tuple)
to_list[2]=300
to_tuple=tuple(to_list)
print(to_tuple)

#you can do multiplication with tuple and int
tuple1=(1,2,3,4)*3

print(tuple1)
print(len(tuple1))

#dict
dict1={}
dict1["Harry"]="First"
dict1["kasper"]= 2
dict1["Nolan"] = 2.5
print(dict1)

#or
dict2={"Harry": "First", "Kasper":2,"Nolan": 2.5}
print(dict2)

'''To retrieve a value from the dictionary,
it is the key that is needed. So you don’t have to think about which order they are.'''
team_atlas={"Trex":1,"Jaguar":2,"Tiger":3,"Lion":4}
value=team_atlas['Trex']
print(value)
print(team_atlas["Tiger"])

'''getting value by using key in two ways'''

#dictionaries are mutable
box={"pencil":2,"pen":3,"eraseer":4}
box["pencil"]=10
print(box)
box["pen"]=box["pen"]*100
print(box)

'''use len() to count length'''
print(len(box))

#looping through dictionary
box={"pencil":2,"pen":3,"eraseer":4}
'''to get keys through looping'''
for key in box:
  print(key)

'''to get key method2'''
for key in box.keys():
  print(key)

'''to get value through loop'''
for val in box:
  print(box[val])

'''to get value through loop'''
for val in box.values():
  print(val)

'''get keys and values '''
box={"pencil":2,"pen":3,"eraseer":4}

for key,value in box.items():
  print(key,value)

'''using key() method in a variable, we can get all keys under a list'''
box = {'pencil':3,'pen':4,'eraser':2}
key_values = box.keys()
print(key_values)

#update value
closet={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
closet['Top tank']=100
print(closet)

#add value
closet={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
closet["shoes"]=100
print(closet)


#add with update function
closet={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
closet.update({"Shoes":300})
'''here you should add{} as a new element of dictionary, to add a new value '''
print(closet)

#remover a value
closet={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
del closet ["Top tank"]
print(closet)

# remove a value from tuple
'''by converting tuple into a list'''

# dictonary
dict1={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
new=dict1.keys()
print(new)

dict1={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}

my_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
newlist=my_list[:]
print(newlist)

#get list from dictionary key

dict1={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}

key=sorted(dict1.keys())
print(new)

#get list from dictionary value
dict1={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
value=sorted(dict1.values())
print(value)


dict1={"Shirt":5,"Pant":4, "Tshirt":6,"Top tank": 3}
value=sorted(dict1.items())
print(value)

#

'''.copy() use, it will not change the elements of main dict'''
game={"1st person": 50, "2nd person": 40, "3rd person": 60, "3D": 20}
person={"1st person": 50, "2nd person": 40, "3rd person": 60}
dimentional={"3D":20}

person_dict=person.copy()
dimen_dict=dimentional.copy()

person_dict.update({"4th person": 90})

print(game)
print(person)
print(dimentional)
print(person_dict)
print(dimen_dict)
print(person_dict)

#assignment-6 tuple and dictionary
#task1
'''task 1 will teach you how to access into the elements of the elements of a nested tuple
which is a mixture of tuple,list'''

a_tuple = ("The Institute",("Best Mystery & Thriller", "The Silent Patient", 68821),75717,[1, 2, 3, 400, 5, 6, 7], ("Best Fiction", "The Testaments", 98291))
print(a_tuple[3][3])

#task2
tuple1=(10, 20, 24, 25, 26, 35, 70)
tuple2=(10, 20, 30, 40)
new_tuple=tuple2[2:-2]
print(new_tuple)

#task3 #use loop to print each element
book_info = (
("Best Mystery & Thriller","The Silent Patient",68,821),
("Best Horror","The Institute",75,717),
("Best History & Biography","The five",31,783 ),
("Best Fiction","The Testaments",98,291)
)
print(f"the size of the tuple is: {len(book_info)}")
'''remember that tuple's element also create a tuple'''
for i in book_info:
  print(i)

#task4 method partial
'''this task is about variable swapping type and use the concept of tuple unpacking'''

book_info = (
("Best Mystery & Thriller","The Silent Patient",68821),
("Best Horror","The Institute",75717),
("Best History & Biography","The five",31783 ),
("Best Fiction","The Testaments",98291)
)
a=book_info[0][0]
b=book_info[0][1]
c=book_info[0][2]

print(f"{b} won the '{a}' with {c} votes.")

'''this is a manual catagory and a hard code'''

#task4 original method
'''this task is about variable swapping type and use the concept of tuple unpacking'''

book_info = (
("Best Mystery & Thriller","The Silent Patient",68821),
("Best Horror","The Institute",75717),
("Best History & Biography","The five",31783 ),
("Best Fiction","The Testaments",98291)
)
'''accessing into every elements of nested tuple by using tripple variable through for loop'''


for category,book,vote in book_info:
  print(f"{book} won the '{category}' category with {vote} votes.")

#task5
given_tuple=(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)
user_input=int(input("enter: "))
count=0
for i in given_tuple:
  if user_input == i:
    count+=1
print(f"{user_input} appears {count} times in the tuple")

#u can use count function
given_tuple=(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)
user_input=int(input("enter: "))
number=given_tuple.count(user_input)
print(f"{user_input} appears {number} times in the tuple")

#task6
#using slicing
tuple1=('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
reverse_tuple=tuple1[::-1]
'''perfect for reverse slicing[::-1] but not this[-1:-1:-1]'''
print(reverse_tuple)

#task6
tuple1=('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
list1=list(tuple1)
list1.reverse()
'''you need no variable to store reverse function'''
'''u have already reversed list1 so just print it'''
print(tuple(list1))

#task7
'''using update method you can add new dict and you must print the first dict'''
dict1={'Harry':15, 'Draco':8, 'Nevil':19}
dict2={'Ginie':18, 'Luna': 14}
dict3=dict1.copy()
dict4=dict2.copy()
merged=dict3.update(dict4)
print(dict3)


'''another method is dictionary unpacking by using **'''
dict1={'Harry':15, 'Draco':8, 'Nevil':19}
dict2={'Ginie':18, 'Luna': 14}
dict3=dict1.copy()
dict4=dict2.copy()
merged={**dict3,**dict4}
print(merged)

'''cisco python learning'''
print("My", "name", "is", "Monty", "Python.", sep="-")

print("My", "name", "is", sep="_", end="*")
print("Monty", "Python.", sep="*", end="*\n")

print("My\nname\nis\nBond.", end=" ")
print("James Bond.")

print('Greg\'s book.')
print("'Greg's book.'")
print('"Greg\'s book."')
print("Greg\'s book.")
print('"Greg's book."') #error

#cisco
'''0x123 is a hexadecimal number with a (decimal) value equal to 291.
 The print() function can manage these values too.'''

print(0x123)

#escape quote
''' \ always misses the next characters importance and
 it normally prints so that you can easily use quoted lines'''

print("I like \"Monty Python\"")

#task8
'''method1'''
dict1={}
num_entities=int(input("Enter the pair number of key-value:"))
total=0
count=0
average=0
for i in range(num_entities):
  key=input("Enter key: ")
  value=int(input("Enter value: "))
  dict1[key]=value
for value in dict1.values():
  total+=value
  count+=1

average=total/count
if total>=0:
  print("Average is",int(total))
else:
  print("The dictionary is empty")

#task9
exam_marks = {'Cierra Vega': 175, 'Alden Cantrell': 200, 'Kierra Gentry': 165, 'Pierre Cox': 190}
user_input=int(input("Enter a value which will set the limit of values: "))
new_dict={}

'''this loop and its var are very important'''
for student,marks in exam_marks.items():
  if marks>=user_input:
    new_dict[student]=marks

print(new_dict)

#task10
"""you are not allowed to use max()here"""
given_dictionary={'sci fi': 12, 'mystery': 15, 'horror': 8, 'mythology': 10, 'young_adult': 4, 'adventure':14}
max_value= None
max_key= None

for key,value in given_dictionary.items():
  if max_value is None or value> max_value:
    max_value=value
    max_key=key

if max_value is not None:
  print(f"The highest selling book genre is {max_key} and the number of books sold are {max_value}.")
else:
  print(f"The dictionary is empty.")

#task11
user_input=input("Enter your string: ")

frequency={}
user_input=user_input.lower()

for char in user_input:
  if char.isalpha():
    frequency[char]=frequency.get(char,0)+1

print(frequency)

#task12
dict1 = {'A': [1, 2, 3], 'b': ['1', '2'], "c": [4, 5, 6, 7]}
count=0

for value in dict1.values():
  for i in value:
    count+=1

print(count)

#task13
'''use membership operator in loop like is in'''

list_1 = [("a", 1), ("b", 2), ("a", 3), ("b", 1), ("a", 2), ("c", 1)]
dict1={}

for key,value in list1:
  if key in dict1:
    dict1[key].append(value)

my_dict = {'fruits': ['apple', 'banana']}

# Append a new item to the list associated with the 'fruits' key
my_dict['fruits'].append('cherry')

print(my_dict)

my_list = [('a', 1), ('b', 2), ('c', 3), ('a':2)] '''you cant have similar key in a tupled list'''
my_dict = dict(my_list)
print(my_dict)